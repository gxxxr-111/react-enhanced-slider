{"version":3,"file":"index.cjs.js","sources":["../src/utils.tsx","../src/slider.tsx"],"sourcesContent":["export interface Range {\n    min: number\n    max: number\n    step: number\n}\n\nexport function v2p(val: number, { min, max }: Range) {\n\n    // For updating the display\n\n    // value -> percentage\n    // |min|-----|val|-----------|max|\n\n    return (val - min) / (max - min) * 100;\n}\n\nexport function p2v(percentage: number, { min, max }: Range) {\n\n    // For updating the value\n\n    // percentage -> value\n\n    return percentage * (max - min) / 100 + min;\n}\n\nexport function correctNumber(rawValue: number, { min, max, step }: Range) {\n    if (step > max - min) return min;\n\n    const precision = step.toString().split('.')[1]?.length || 0;\n    const factor = Math.pow(10, precision);\n\n    const steps = Math.round((rawValue - min) / step);\n    let adjusted = min + steps * step;\n\n    adjusted = Math.round(adjusted * factor) / factor;\n\n    const clamped = Math.min(max, Math.max(min, adjusted));\n\n    return Number(clamped.toFixed(precision));\n}","import React, { useState, useRef, useCallback, ChangeEvent, useEffect } from 'react';\nimport { Range, v2p, p2v, correctNumber } from './utils';\n\ninterface StepSliderProps {\n    range?: Range\n    value?: number\n    defaultValue?: number\n    onChange?: (value: number) => void\n\n    className?: string\n    showBar?: boolean\n\n    thumbColor?: string\n    barColor?: string\n}\n\nexport const Slider: React.FC<StepSliderProps> = ({\n    range = { min: 0, max: 100, step: 1 },\n    defaultValue = correctNumber((range.min + range.max) / 2, range),\n    onChange,\n    className,\n    showBar = false,\n    thumbColor = \"#3b82f6\",\n    barColor = \"#3b82f6\",\n}) => {\n    const { min, max, step } = range;\n\n    // Internal value of the component\n    const [internalValue, setInternalValue] = useState<number>(defaultValue);\n    const internalValueRef = useRef(internalValue); // Avoid closure trap\n\n    // Judge dragging state to apply transition\n    const [isDragging, setIsDragging] = useState(false);\n\n    // Reference to the slider <div>\n    const sliderRef = useRef<HTMLDivElement>(null);\n\n    const [inputValue, setInputValue] = useState(internalValue.toString());\n\n    // Update internal value\n    const updateInternalValue = useCallback(\n        (value: number) => {\n            const corrected = correctNumber(value, range)\n\n            if (value == corrected) {\n                setInputValue(corrected.toString());\n                onChange?.(corrected);\n            }\n            internalValueRef.current = value;\n            setInternalValue(value);\n        }, [onChange, range]\n    );\n\n    // Correct value & Update external value\n    const updateExternalValue = useCallback(\n        (value: number) => {\n            const corrected = correctNumber(value, range);\n\n            internalValueRef.current = corrected;\n            setInternalValue(corrected);\n\n            setInputValue(corrected.toString());\n\n            onChange?.(corrected);\n        }, [onChange, range]\n    )\n\n    // Calculate rounded value of user input\n    const x2v = useCallback(\n        (clientX: number) => {\n            if (!sliderRef.current) return min;\n\n            const rect = sliderRef.current.getBoundingClientRect();\n\n            const offsetX = Math.min(rect.width, Math.max(0, clientX - rect.left)); // Restriction\n            const percentage = offsetX / rect.width * 100;\n            const rawValue = p2v(percentage, range);\n\n            // return correctNumber(rawValue, range);\n            return rawValue;\n        },\n        [min, max, step]\n    );\n\n    const handleMouseDown = useCallback(\n        (e: React.MouseEvent | React.TouchEvent) => {\n            e.preventDefault();\n            setIsDragging(true);\n\n            const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;\n            const newValue = x2v(clientX);\n            updateInternalValue(newValue);\n\n            const handleMove = (moveEvent: Event) => {\n                const event = moveEvent as unknown as MouseEvent | TouchEvent;\n\n                const moveClientX = 'touches' in event ?\n                    event.touches[0].clientX :\n                    (event as MouseEvent).clientX;\n\n                const moveValue = x2v(moveClientX);\n                updateInternalValue(moveValue);\n            };\n\n            const handleUp = () => {\n                setIsDragging(false);\n                document.removeEventListener('mousemove', handleMove);\n                document.removeEventListener('mouseup', handleUp);\n                document.removeEventListener('touchmove', handleMove);\n                document.removeEventListener('touchend', handleUp);\n\n                updateInternalValue(correctNumber(internalValueRef.current, range));\n            };\n\n            document.addEventListener('mousemove', handleMove);\n            document.addEventListener('mouseup', handleUp);\n            document.addEventListener('touchmove', handleMove);\n            document.addEventListener('touchend', handleUp);\n        }, [x2v]);\n\n\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = Number(e.target.value);\n        const clampedValue = Math.min(Math.max(value, min), max);\n\n        setInputValue(clampedValue.toString());\n        updateInternalValue(clampedValue);\n    };\n\n    // When input loses focus, correct the value\n    const handleInputBlur = () => {\n        updateExternalValue(Number(inputValue));\n    };\n\n    useEffect(() => {\n        const corrected = correctNumber(internalValue, range);\n        if (corrected !== internalValue) {\n            setInternalValue(corrected);\n            setInputValue(corrected.toString());\n            onChange?.(corrected);\n        }\n    }, [range]);\n\n    return (\n        <div className={`react-slider relative h-4 w-xs ${className}`}>\n\n            {/* Slider Track */}\n            <div\n                ref={sliderRef}\n                className=\"absolute top-1/2 h-1 w-full -translate-y-1/2 rounded-full bg-gray-300 cursor-pointer\"\n                onMouseDown={handleMouseDown}\n                onTouchStart={handleMouseDown}\n                role=\"slider\"\n                aria-valuemin={min}\n                aria-valuemax={max}\n                aria-valuenow={internalValue}\n            >\n\n                {/* Fill */}\n                {\n                    showBar\n                        ? < div\n                            className={`h-full rounded-full ${isDragging ? '' : 'transition-all duration-500'}`}\n                            style={{ width: `${v2p(internalValue, range)}%`, backgroundColor: barColor }}\n                        />\n                        : null\n                }\n            </div>\n\n            {/* Slider Thumb */}\n            <div\n                className={`group absolute top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 rounded-full ${isDragging ? '' : 'transition-all duration-500'}`}\n                style={{\n                    left: `${v2p(internalValue, range)}%`,\n                    backgroundColor: `${thumbColor}${Math.round(0.3 * 255).toString(16).padStart(2, '0')}`\n                }}\n                onMouseDown={handleMouseDown}\n                onTouchStart={handleMouseDown}\n            >\n\n                <div\n                    className='absolute top-1/2 left-1/2 h-2 w-2 -translate-x-1/2 -translate-y-1/2 rounded-full shadow-md transition-transform duration-200 ease-in-out group-hover:scale-[3]'\n                    style={{ backgroundColor: thumbColor }}\n                />\n            </div>\n\n            {/* Input */}\n            <input\n                type=\"number\"\n                value={inputValue}\n                onChange={handleInputChange}\n                onBlur={handleInputBlur}\n                min={min}\n                max={max}\n                step={step}\n                className=\"absolute top-1/2 left-full ml-6 w-16 -translate-y-1/2 text-center border border-gray-300 rounded\"\n                aria-label=\"Slider value\"\n            />\n\n            {/* <div className='m-10'>Internal value: {internalValue}</div>\n            <div className='m-10'>Internal ref value: {internalValueRef.current}</div> */}\n        </div >\n    );\n};\n"],"names":["v2p","val","min","max","correctNumber","rawValue","step","precision","toString","split","length","factor","Math","pow","adjusted","round","clamped","Number","toFixed","range","defaultValue","onChange","className","showBar","thumbColor","barColor","internalValue","setInternalValue","useState","internalValueRef","useRef","isDragging","setIsDragging","sliderRef","inputValue","setInputValue","updateInternalValue","useCallback","value","corrected","current","updateExternalValue","x2v","clientX","rect","getBoundingClientRect","percentage","p2v","width","left","handleMouseDown","e","preventDefault","touches","newValue","handleMove","moveEvent","event","moveClientX","moveValue","handleUp","document","removeEventListener","addEventListener","useEffect","_jsxs","jsxs","children","_jsx","jsx","ref","onMouseDown","onTouchStart","role","style","backgroundColor","padStart","type","target","clampedValue","onBlur"],"mappings":"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"}